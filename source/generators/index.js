import { customGenerator } from './custom';
import { emptyGenerator } from './empty';
import { expandGenerator } from './expand';
import { randomGenerator } from './random';
import { rangeGenerator } from './range';
import { repeatGenerator } from './repeat';

import { instance } from '../instance';

/**
Creates programmatically controlled flow.

@memberof aeroflow
@static

@param {function|any} emitter
The emitter function taking three arguments:
next - the function emitting 'next' event,
done - the function emitting 'done' event,
context - the execution context.

@return {Flow}
The new flow emitting values generated by emitter function.

@example
aeroflow.create((next, done, context) => {
  next('test');
  done();
}).dump().run();
// next test
// done true
aeroflow.create((next, done, context) => {
  window.addEventListener('click', next);
  return () => window.removeEventListener('click', next);
}).take(2).dump().run();
// next MouseEvent {...}
// next MouseEvent {...}
// done false
*/
export function create(emitter) {
  return instance(customGenerator(emitter));
}

export const empty = instance(emptyGenerator(true));

/**
@alias aeroflow.expand

@param {function} expander
@param {any} [seed]

@return {Flow}

@example
aeroflow.expand(value => value * 2, 1).take(3).dump().run();
// next 2
// next 4
// next 8
// done false
*/
export function expand(expander, seed) {
  return instance(expandGenerator(expander, seed));
}

/**
Creates new flow emitting infinite sequence of random numbers.

@alias aeroflow.random

@param {number} [minimum]
@param {number} [maximum]

@return {Flow}
The new flow emitting random numbers.

@example
aeroflow.random().take(2).dump().run();
// next 0.07417976693250232
// next 0.5904422281309957
// done false
aeroflow.random(1, 9).take(2).dump().run();
// next 7
// next 2
// done false
aeroflow.random(1.1, 8.9).take(2).dump().run();
// next 4.398837305698544
// next 2.287970747705549
// done false
*/
export function random(minimum, maximum) {
  return instance(randomGenerator(minimum, maximum));
}

/**
@alias aeroflow.range

@param {number} [start]
@param {number} [end]
@param {number} [step]

@return {Flow}

@example
aeroflow.range().take(3).dump().run();
// next 0
// next 1
// next 2
// done false
aeroflow.range(-3).take(3).dump().run();
// next -3
// next -2
// next -1
// done false
aeroflow.range(1, 1).dump().run();
// next 1
// done true
aeroflow.range(0, 5, 2).dump().run();
// next 0
// next 2
// next 4
// done true
aeroflow.range(5, 0, -2).dump().run();
// next 5
// next 3
// next 1
// done true
*/
export function range(start, end, step) {
  return instance(rangeGenerator(start, end, step));
}

/**
Creates flow repeating provided value.

@alias aeroflow.repeat

@param {function|any} [value]
Arbitrary static value to repeat;
or function providing dynamic values and invoked with two arguments:
  index - index of the value being emitted,
  data - contextual data.
@param {number|function} [interval]

@return {Flow}
The new flow emitting repeated values.

@example
aeroflow.repeat(Math.random()).take(2).dump().run();
// next 0.7492001398932189
// next 0.7492001398932189
// done false
aeroflow.repeat(() => Math.random()).take(2).dump().run();
// next 0.46067174314521253
// next 0.7977648684754968
// done false
aeroflow.repeat(index => Math.pow(2, index)).take(3).dump().run();
// next 1
// next 2
// next 4
// done false
aeroflow.repeat('ping', 500).take(3).dump().run();
// next ping // after 500ms
// next ping // after 500ms
// next ping // after 500ms
// done false
aeroflow.repeat(index => index, index => 500 + 500 * index).take(3).dump().run();
// next ping // after 500ms
// next ping // after 1000ms
// next ping // after 1500ms
// done false
*/
export function repeat(value, interval) {
  return instance(repeatGenerator(value, interval));
}
